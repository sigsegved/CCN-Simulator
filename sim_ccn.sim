'' This is a process-oriented Simscript model of a M/M/1 queue

'' (The code can be copied from the file: /home/courses/cse529/SIMSCRIPT_code/mm1_process.sim )

'' It will stop when the number of customers specified in variable
'' num.delays has passed through the queue

preamble
normally, mode is undefined

    processes include GENERATOR, resend_packets
      every PACKET has a PTR and a CTR
		break packet ties by low CTR
    define CTR,PTR as a integer variable  

    resources include queue
  
  
  permanent entities
  every ROUTER has a ROUTER.ID and owns a REPOSITORY and a PIT and a FIB
  and a CACHE and a PKTLIST
  define ROUTER.ID as an integer variable
  
  temporary entities
  every REPOSITORY.OBJECT has a OBJ.ID and has a OBJ.SIZE 
    and belongs to a REPOSITORY
  every PIT.ENTRY has a OBJ.ID and a OBJ.SEG.ID and a OBJ.SIZE 
    and a INTERFACE and a TIMESTAMP and belongs to a PIT
  every FIB.ENTRY has a OBJ.ID and a OBJ.SIZE and a INTERFACE 
    and a HOP.COUNT and belongs to a FIB
  every CACHE.OBJECT has a OBJ.ID and a OBJ.SEG.ID and a OBJ.SIZE
    and belongs to a CACHE
  every PACKET.INFO has a PKT.ID and a PKT.SRC.ID and a PKT.OWNER
  and a PKT.TYPE and a PKT.HOPS and a PKT.PREV.NODE and a PKT.CUR.NODE
  and a PKT.OBJ.ID  and a PKT.OBJ.SIZE and a TIMESTAMP 
	and a PKT.STATUS belongs to a PKTLIST
  
  define OBJ.ID, OBJ.SIZE, OBJ.SEG.ID, INTERFACE, HOP.COUNT
     as integer variables
  define PKT.ID, PKT.SRC.ID, PKT.OWNER, PKT.HOPS as integer variables
  define PKT.OBJ.SIZE, PKT.TYPE,PKT.OBJ.ID,PKT.STATUS  as integer variables
  define PKT.PREV.NODE, PKT.CUR.NODE, PKT.SIZE as integer variables
  define PKT.IS.ALIVE, PKT.IS.LOCAL as integer variables
  define PKT.ARRIVAL.TIME, PKT.RESP.TIME as real variables
  define TIMESTAMP as a real variable  
  define REPOSITORY as a FIFO SET
  define PIT as a SET ranked by HIGH TIMESTAMP
  define FIB as a FIFO SET
  define CACHE as a FIFO SET
  define PKTLIST as a FIFO SET ranked by HIGH TIMESTAMP
  
  accumulate  util.server       as the average of n.x.queue
  accumulate  ave.queue.length  as the average of n.q.queue
  accumulate  max.queue.length  as the maximum of n.q.queue
  
  tally       avg.queue.time   as the average of wait.time
  
  define num.done, num.delays, num.nodes  as integer variables
  define wait.time as a double variable
  define adj_matrix as 2-dimensional, integer array
  define NUM.PACKETS as integer variable

end

''===========================================================================

main
  WRITE "NUMBER OF NODES IN SIMULATION : " as T *, /
  define i as integer variable
  READ num.nodes
  N.ROUTER = num.nodes
  call POPULATE.ADJ.MATRIX
  create every ROUTER
  call INIT.REPOS

  ''now for each router,
  ''create a repository.entry
  ''fill the values
  ''file the repository.entry into repository(router)

  create every queue(N.ROUTER)
  ''create every queue(1)
	''U.queue = 1
  for i=1 to N.ROUTER by 1
  do
    U.queue(i) = 2
  loop
  activate a generator in exponential.f(1.0,1) units
  activate a resend_packets in exponential.f(1.0,1) units

  start simulation

end
''===========================================================================

process resend_packets
	define IPKT.COUNT,i,x,R.TIME.OUT as integer variable
	let R.TIME.OUT = 5.0
	for x=0 to 1 by 0
	do
		print 1 line with time.v thus 
resend_process awake at *****.**** seconds
		IPKT.COUNT  = 0
		for i=1 to N.ROUTER by 1
		do 
			IPKT.COUNT = IPKT.COUNT + N.PKTLIST(i)
			for each PACKET.INFO in PKTLIST(i) 
			do 
				''if time expired
				if time.v - TIMESTAMP(PACKET.INFO) > R.TIME.OUT
					call ACTIVATE.PKT giving 
      		PKT.ID(PACKET.INFO), PKT.OWNER(PACKET.INFO), 
					PKT.OBJ.ID(PACKET.INFO), 1, 0,i,0 
				always
			loop
		loop
		if IPKT.COUNT EQ 0 AND NUM.PACKETS EQ 0 
			stop
		always
    wait exponential.f(2.0,1) units
	loop
end

''===========================================================================
process generator
  define GLOBAL.PACKET.ID as integer variable
  read NUM.PACKETS
  num.done = 0
  GLOBAL.PACKET.ID = 1451
  define PKT.NAME as integer variable
  while NUM.PACKETS > 0
  DO
    ''read the web traffic file and construct PACKET.INFO. 
	print 1 line with time.v*24*3600 thus 
TIME IN SEC = *******.******
    create a PACKET.INFO
    print 1 line thus 
ENTER PKT.ID
    read PKT.ID(PACKET.INFO)
WRITE "PKT.OWNER : " as T *, /
    read PKT.OWNER(PACKET.INFO)
WRITE "PKT.OBJ.ID : " as T *, /
    read PKT.OBJ.ID(PACKET.INFO)
    PKT.TYPE(PACKET.INFO) = 1
    PKT.HOPS(PACKET.INFO) = 0
    PKT.CUR.NODE(PACKET.INFO) = PKT.OWNER(PACKET.INFO)
    PKT.NAME = RANDOM.F(1)*100000
    activate a packet called PKT.NAME now
	CTR..(PKT.NAME) = GLOBAL.PACKET.ID
	let PTR(PKT.NAME) = PACKET.INFO
	let PKT.ID(PTR(PKT.NAME)) = GLOBAL.PACKET.ID
    NUM.PACKETS = NUM.PACKETS - 1
	GLOBAL.PACKET.ID = GLOBAL.PACKET.ID + 1
  	FILE PACKET.INFO in PKTLIST(PKT.OWNER(PACKET.INFO))
    wait exponential.f(2.0,1) units
  loop
end
''===========================================================================
process packet
  define arriv.time as a double variable
  define j,PIT_ENT as integer variable

	if(PTR EQ 0 )
		print 1 line thus
DESTROYING NULL PACKET
		''go to end_label
		print 1 line thus
DESTROYED NULL PACKET
	always


  print 8 lines with PKT.ID(PTR), PKT.OWNER(PTR), PKT.CUR.NODE(PTR), 
  PKT.PREV.NODE(PTR), PKT.OBJ.ID(PTR) , PKT.TYPE(PTR) thus
----PACKET INFO-------
PKT.ID         : ****
PKT.OWNER      : ****
PKT.CUR.NODE   : ****
PKT.PREV.NODE  : ****
PKT.OBJ.ID     : ****
PKT.TYPE       : ****
----------------------
  ROUTER = PKT.CUR.NODE(PTR)
  arriv.time = time.v
  print 1 line with  ROUTER thus 
REQUESTING 1 UNIT OF QUEUE(**)
  request 1 unit of queue(ROUTER)
  if (PKT.TYPE(PTR) = 1) 
  ''{
    ''INTEREST PACKET 
    ''SEARCH THE ROUTER'S REPO
    define OBJ as integer variable
    call SEARCH.REPOSITORY giving PTR yielding OBJ
    if ( OBJ = 0 )
    ''{
      ''SEARCH CACHE
      call SEARCH.CACHE giving PTR yielding OBJ
      if(OBJ = 0)
      ''{
        ''CHECK FIB
        call SEARCH.FIB giving PTR yielding OBJ
        if(OBJ = 0)  
        ''{
					if(PKT.CUR.NODE(PTR) NE PKT.OWNER(PTR)) 
          	call SEARCH.PIT giving PTR yielding PIT_ENT
					else 
						PIT_ENT = 0
					always
          if(PIT_ENT = 0)
          ''{
            ''BROADCAST PACKET
	    if(PKT.PREV.NODE(PTR) NE 0)
              call ADD.PIT giving PTR 
	    always
            for j=1 to num.nodes
            do
		    ''print 1 line with j,PKT.PREV.NODE(PTR),
		    ''PKT.CUR.NODE(PTR) thus
''J = **** , PREV.NODE = ****, CUR.NODE = *****

              if j NE PKT.PREV.NODE(PTR) 
		if adj_matrix(ROUTER,j) = 1
		  Print 1 line with PKT.ID(PTR),PKT.CUR.NODE(PTR),j thus 
FORWARDING PACKET *** FROM *** TO *** 
                  call ACTIVATE.PKT 
		  giving PKT.ID(PTR), PKT.OWNER(PTR), 
		  PKT.OBJ.ID(PTR), 1, PKT.HOPS(PTR), j, PKT.CUR.NODE(PTR)
                always
	      always
            loop
          ''}
          else 
            ''PIT FOUND , SUPRESS IT & UPDATE PIT.
	    			print 1 line thus 
PIT FOUND, SUPRESS THE PACKET
            call ADD.PIT giving PTR 
          always
        ''}
        else 
	  ''FIB ENTRY FOUND
	  call OBJECT_FOUND_FIB giving PTR and OBJ
        always 
      ''}
      else 
	''CACHE ENTRY FOUND
        call ADD.PIT giving PTR 
        call ACTIVATE.PKT giving 
	PKT.ID(PTR), PKT.OWNER(PTR), PKT.OBJ.ID(PTR), 2, 0,ROUTER,0
      always 
    ''}
    else 
      ''REPOSISTORY ENTRY FOUND
      call ADD.PIT giving PTR 
      call ACTIVATE.PKT giving 
      PKT.ID(PTR), PKT.OWNER(PTR), PKT.OBJ.ID(PTR), 2, 0,ROUTER,0 
    always 
  ''}
  else 
    ''DATA PACKET
    call SEARCH.PIT giving PTR yielding PIT_ENT
    if(PKT.OWNER(PTR) = PKT.CUR.NODE(PTR))
	    print 1 line thus 
RECEIVED THE REQUESTED OBJECT
			''REMOVE PACKET.INFO FROM PKTLIST(PKT.CUR.NODE)  -- TODO
			call DELETE.PKTLIST giving PTR
		else 
    	if(PIT_ENT = 0)
    	''{
      	''SUPRESS PACKET.
      	''print trace3
      	print 1 line with ROUTER thus 
SUPRESSING DATA PACKET - NO PIT ENTRY at **** 
    	''}
    	else 
    	''{
      	''FOR ALL PIT.ENT forward/activate a new packet
      	''PURGE the PIT
      	''ADD A FIB ENTRY
      	''ADD OBJ TO CACHE
      	call FWD.DATA.PKT giving PTR
      	call ADD.FIB giving PTR
      	call ADD.CACHE giving PTR
      	
    	''}
   		always
    always
  always

   wait.time = time.v - arriv.time
   print 1 line  with PKT.CUR.NODE(PTR) thus
RELINQUISHED 1 UNIT OF QUEUE FOR ****
   relinquish 1 unit of queue(PKT.CUR.NODE(PTR))
   work exponential.f(0.5,2) units
	'end_label'

end
''===========================================================================

routine DELETE.PKTLIST giving PKT
define PKT as integer variable
	for each PACKET.INFO in PKTLIST(PKT.CUR.NODE(PKT)) 
	do
		if PKT.ID(PACKET.INFO) EQ PKT.ID(PKT) 
			REMOVE PACKET.INFO from PKTLIST(PKT.CUR.NODE(PKT))
		always
	loop
	
end

''===========================================================================

routine ADD.CACHE giving PKT
  define PKT as integer variable
  ROUTER = PKT.CUR.NODE(PKT)
  create a CACHE.OBJECT
  OBJ.ID(CACHE.OBJECT) = PKT.OBJ.ID(PKT)
  OBJ.SIZE(CACHE.OBJECT) = PKT.OBJ.SIZE(PKT)
  FILE CACHE.OBJECT in CACHE(ROUTER)
  return
end


''============================================================================
routine ADD.FIB giving PKT
  define PKT as integer variable
  define FIB.ENT as integer variable
  call SEARCH.FIB giving PKT yielding FIB.ENT

  if FIB.ENT NE 0 AND HOP.COUNT(FIB.ENT) < HOP.COUNT(PKT)
    ''delete FIB.ENT
    REMOVE the FIB.ENT from FIB(PKT.CUR.NODE(PKT))
  always

  ROUTER = PKT.CUR.NODE(PKT)
  create a FIB.ENTRY
  OBJ.ID(FIB.ENTRY) = PKT.OBJ.ID(PKT)
  OBJ.SIZE(FIB.ENTRY) = PKT.OBJ.SIZE(PKT)
  INTERFACE(FIB.ENTRY) = PKT.PREV.NODE(PKT)
  TIMESTAMP(FIB.ENTRY) = time.v
  HOP.COUNT(FIB.ENTRY) = PKT.HOPS(PKT)
  FILE FIB.ENTRY in FIB(ROUTER)

  return
end

''============================================================================

routine ADD.PIT giving PKT 
  define PKT as integer variable
	define PIT_ENT as integer variable
  ROUTER = PKT.CUR.NODE(PKT)
  call SEARCH.PIT giving PKT yielding PIT_ENT
	if PIT_ENT EQ 0 OR INTERFACE(PIT_ENT) NE PKT.PREV.NODE(PKT)
  	create a PIT.ENTRY
  	OBJ.ID(PIT.ENTRY) = PKT.OBJ.ID(PKT)
  	OBJ.SIZE(PIT.ENTRY) = PKT.OBJ.SIZE(PKT)
  	INTERFACE(PIT.ENTRY) = PKT.PREV.NODE(PKT)
  	TIMESTAMP(PIT.ENTRY) = time.v
  	FILE PIT.ENTRY in PIT(ROUTER)
		print 1 line with ROUTER, PKT.PREV.NODE(PTR), 
		OBJ.ID(PIT.ENTRY)  thus
PIT ENTRY FROM **** to **** FOR OBJ ***
	always 

end

''============================================================================
routine PURGE.PIT giving ROUTER_ID
define PIT.THRESHOLD, ROUTER_ID as integer variable
let PIT.THRESHOLD = 2.0

for each PIT.ENTRY in PIT(ROUTER_ID)
do
	if(time.v - TIMESTAMP(PIT.ENTRY) > PIT.THRESHOLD) 
		REMOVE the PIT.ENTRY from PIT(ROUTER_ID)
print 1 line with MINUTE.F(time.v), TIMESTAMP(PIT.ENTRY) thus 
TIME.V = ********.*****  TIMESTAMP = *******.*****
	always
loop

end

''============================================================================
routine SEARCH.PIT giving PKT yielding PIT_ENT

  define PKT, PIT_ENT as integer variable
  define ROUTER, OBJECT.FOUND as integer variable
  PIT_ENT = 0
  OBJECT.FOUND = 0
  ROUTER = PKT.CUR.NODE(PKT)
  call PURGE.PIT giving ROUTER
  for each PIT.ENTRY in PIT(ROUTER)
  do
    if ( PKT.OBJ.ID(PTR) = OBJ.ID(PIT.ENTRY))
      OBJECT.FOUND = 1
      PIT_ENT = PIT.ENTRY
    always
  loop
  return
end
''============================================================================
routine FWD.DATA.PKT giving PKT 
  define PKT as integer variable
  define ROUTER, OBJECT.FOUND as integer variable
  OBJECT.FOUND = 0
  ROUTER = PKT.CUR.NODE(PKT)
  for each PIT.ENTRY in PIT(ROUTER)
  do
    if ( PKT.OBJ.ID(PKT) = OBJ.ID(PIT.ENTRY) )
      OBJECT.FOUND = 1
      print 1 line with PKT.CUR.NODE(PKT), INTERFACE(PIT.ENTRY) thus
FORWARDING DATA PACKET FROM *** to  ***
      ''call activate packet
      call ACTIVATE.PKT giving PKT.ID(PKT), PKT.OWNER(PKT), 
      PKT.OBJ.ID(PKT), 2, PKT.HOPS(PKT), INTERFACE(PIT.ENTRY), 
      PKT.CUR.NODE(PKT)
                
    always
  loop
  return
end

''============================================================================

routine ACTIVATE.PKT giving PKTID, PKTOWN, PKTOBJID, PKTTYPE,
				PKTHOPS, PKTCURNODE, PKTPREVNODE
  define PKTID, PKTOWN, PKTOBJID, PKTTYPE as integer variable
  define PKTHOPS, PKTCURNODE,PKTPREVNODE as integer variable
  define PKT.NAME as integer variable
  create a PACKET.INFO
  PKT.ID(PACKET.INFO) = PKTID
  PKT.OWNER(PACKET.INFO) = PKTOWN
  PKT.OBJ.ID(PACKET.INFO) = PKTOBJID
  PKT.TYPE(PACKET.INFO) = PKTTYPE
  PKT.HOPS(PACKET.INFO) = PKTHOPS
  PKT.CUR.NODE(PACKET.INFO) = PKTCURNODE
  PKT.PREV.NODE(PACKET.INFO) = PKTPREVNODE
  PKT.NAME = RANDOM.F(1)*100000
  ''work exponential.f(0.5,2) units
        activate a packet called PKT.NAME now
	CTR..(PKT.NAME) = PKTID
	let PTR(PKT.NAME) = PACKET.INFO
end

''============================================================================
routine  OBJECT_FOUND_FIB giving OBJ and PKT
  define PKT, OBJ as integer variable
  print 1 line thus
OBJECT FOUND in FIB
end

''============================================================================
routine SEARCH.FIB giving PKT yielding OBJ 
  define  PKT, OBJ, OBJECT.FOUND, ROUTER as integer variable
  OBJECT.FOUND = 0
  ROUTER = PKT.CUR.NODE(PKT)
  OBJ = 0
  for each FIB.ENTRY in FIB(ROUTER)
  do
    if ( PKT.OBJ.ID(PTR) = OBJ.ID(FIB.ENTRY) )
      OBJECT.FOUND = 1
      OBJ = FIB.ENTRY
    always
  loop
  return
end

''============================================================================
routine SEARCH.CACHE giving PKT yielding OBJ 
  define  PKT, OBJ, OBJECT.FOUND, ROUTER as integer variable
  OBJECT.FOUND = 0
  ROUTER = PKT.CUR.NODE(PKT)
  OBJ = 0
  for each CACHE.OBJECT in CACHE(ROUTER)
  do
    if ( PKT.OBJ.ID(PTR) = OBJ.ID(CACHE.OBJECT) )
      OBJECT.FOUND = 1
      OBJ = CACHE.OBJECT
    always
  loop
  return
end

''============================================================================
routine SEARCH.REPOSITORY giving PKT yielding OBJ 
  define  PKT, OBJ, OBJECT.FOUND, ROUTER as integer variable
  OBJECT.FOUND = 0
  ROUTER = PKT.CUR.NODE(PKT)
  OBJ = 0
  for each REPOSITORY.OBJECT in REPOSITORY(ROUTER)
  do
    if ( PKT.OBJ.ID(PTR) = OBJ.ID(REPOSITORY.OBJECT) )
      OBJECT.FOUND = 1
      OBJ = REPOSITORY.OBJECT
    always
  loop
  return
end


''============================================================================
routine report
  
  print 6 lines with time.v, util.server, ave.queue.length,
  max.queue.length and avg.queue.time thus
  
  clock time = *******.** minutes
  the utilization of the server was     **.****
  the average length of the queue was  ***.**
  the maximum length of the queue was ****
  the average time in the system was  ****.**   minutes
  
  print 3 lines thus
  
  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  
  '' The following line is just to stall Windows NT Simscript so that results can
  '' be examined. Uncomment the line when using the Windows version of Simscript.
  '' read num.delays

  stop

end

''============================================================================

routine INIT.REPOS

  define i,COUNT as integer variable
  for each ROUTER
  do
    print 1 line with ROUTER thus
How many objects in ROUTER - **  
    READ COUNT
    for i = 1 to COUNT
    do
      create a REPOSITORY.OBJECT
WRITE "OBJ.ID : " as T *, /
      READ OBJ.ID(REPOSITORY.OBJECT)
WRITE "OBJ.SIZE : " as T *, /
      READ OBJ.SIZE(REPOSITORY.OBJECT)
      FILE REPOSITORY.OBJECT IN REPOSITORY(ROUTER)
    loop
  loop

call PRINT.REPOS
  
end
''============================================================================
routine PRINT.REPOS
  for each ROUTER
  do
    print 1 line with ROUTER thus 
**
    for each REPOSITORY.OBJECT in REPOSITORY(ROUTER)
    do
      print 1 line with OBJ.ID(REPOSITORY.OBJECT) 
      and OBJ.SIZE(REPOSITORY.OBJECT) thus
  **  **
    loop
  loop
end
''============================================================================

ROUTINE POPULATE.ADJ.MATRIX

  define col and i and j and con as integer variables
  reserve adj_matrix as num.nodes by num.nodes
  for i = 1 to num.nodes
  do
    for j=i+1 to num.nodes
    do
      col = j
      print 1 line with i and col thus
  Is node ** connected to node ** :
      READ con
      adj_matrix(i,col) = con
      adj_matrix(col,i) = con
    loop
  loop
  
  call PRINT.ADJ.MATRIX
  
END

''===========================================================================
ROUTINE PRINT.ADJ.MATRIX 
  define col and i and j as integer variables
  for i = 1 to num.nodes
  do
    for j=1 to num.nodes
    Do
      col = j
      print 1 line with i and col and adj_matrix(i,col) thus
** ** : **
    loop
  loop
END
''===========================================================================
